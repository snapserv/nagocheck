const nagocheck_bin = "/usr/bin/nagocheck"
const nagocheck_args = {
    "--verbose" = {
        set_if = "$nc_verbose$"
    }
}

object CheckCommand "nc_system_interface" {
    import "plugin-check-command"

    command = [ nagocheck_bin, "system", "interface" ]
    arguments = nagocheck_args + {
        "<name>" = {
            value = "$nc_system_interface_name$"
            required = true
            skip_key = true
        }

        "--speed" = "$nc_system_interface_speed$"
        "--duplex" = "$nc_system_interface_duplex$"
    }

    vars.nc_system_interface_duplex = "full"
    vars.nc_system_interface_speed = 1000
}

object CheckCommand "nc_system_load" {
    import "plugin-check-command"

    command = [ nagocheck_bin, "system", "load" ]
    arguments = nagocheck_args + {
        "--warning" = "$nc_system_load_warning$"
        "--critical" = "$nc_system_load_critical$"
        "--per-cpu" = {
            set_if = "$nc_system_load_per_cpu$"
        }
    }

    vars.nc_system_load_warning = 1
    vars.nc_system_load_critical = 1.5
    vars.nc_system_load_per_cpu = true
}

object CheckCommand "nc_system_mdraid" {
    import "plugin-check-command"

    command = [ nagocheck_bin, "system", "mdraid" ]
    arguments = nagocheck_args
}

object CheckCommand "nc_system_memory" {
    import "plugin-check-command"

    command = [ nagocheck_bin, "system", "memory" ]
    arguments = nagocheck_args + {
        "--warning" = "$nc_system_memory_warning$"
        "--critical" = "$nc_system_memory_critical$"
        "--count-reclaimable" = {
            set_if = "$nc_system_memory_count_reclaimable$"
        }
    }

    vars.nc_system_memory_warning = 80
    vars.nc_system_memory_critical = 90
    vars.nc_system_memory_count_reclaimable = false
}

object CheckCommand "nc_system_session" {
    import "plugin-check-command"

    command = [ nagocheck_bin, "system", "session" ]
    arguments = nagocheck_args + {
        "--warning" = "$nc_system_session_warning$"
        "--critical" = "$nc_system_session_critical$"
        "--lifetime" = "$nc_system_session_lifetime$"
    }

    vars.nc_system_session_warning = 3
    vars.nc_system_session_critical = 5
    vars.nc_system_session_lifetime = 21600
}

object CheckCommand "nc_system_swap" {
    import "plugin-check-command"

    command = [ nagocheck_bin, "system", "swap" ]
    arguments = nagocheck_args + {
        "--warning" = "$nc_system_swap_warning$"
        "--critical" = "$nc_system_swap_critical$"
    }

    vars.nc_system_swap_warning = 25
    vars.nc_system_swap_critical = 50
}

object CheckCommand "nc_system_temperature" {
    import "plugin-check-command"

    command = [ nagocheck_bin, "system", "temperature" ]
    arguments = nagocheck_args + {
        "--warning" = "$nc_system_temperature_warning$"
        "--critical" = "$nc_system_temperature_critical$"
    }

    vars.nc_system_temperature_warning = 70
    vars.nc_system_temperature_critical = 80
}

object CheckCommand "nc_system_uptime" {
    import "plugin-check-command"

    command = [ nagocheck_bin, "system", "uptime" ]
    arguments = nagocheck_args + {
        "--warning" = "$nc_system_uptime_warning$"
        "--critical" = "$nc_system_uptime_critical$"
    }

    vars.nc_system_uptime_warning = "60:"
    vars.nc_system_uptime_critical = ""
}

object CheckCommand "nc_system_zfs" {
    import "plugin-check-command"

    command = [ nagocheck_bin, "system", "zfs" ]
    arguments = nagocheck_args
}

object CheckCommand "nc_frr_bgp_neighbor" {
    import "plugin-check-command"

    command = [ nagocheck_bin, "frrouting", "bgp-neighbor" ]
    arguments = nagocheck_args + {
        "<neighbor>" = {
            value = "$nc_frr_bgp_neighbor_address$"
            required = true
            skip_key = true
        }

        "--mode" = "$nc_frr_bgp_neighbor_mode$"
        "--vtysh-cmd" = "$nc_frr_bgp_neighbor_vtysh_cmd$"
        "--prefix-limit" = "$nc_frr_bgp_neighbor_prefix_limit$"
        "--uptime" = "$nc_frr_bgp_neighbor_uptime$"
        "--critical" = {
            set_if = "$nc_frr_bgp_neighbor_critical$"
        }
    }
}
